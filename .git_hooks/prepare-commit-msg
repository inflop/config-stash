#!/bin/bash

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

if [ "${COMMIT_SOURCE}" = merge ]; then
    exit 0
fi

# This way you can customize which branches should be skipped when
# prepending commit message.
if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP=(master main develop dev test)
fi

#$(git rev-parse --abbrev-ref HEAD)
BRANCH_NAME=$(git symbolic-ref --short HEAD)
BRANCH_NAME="${BRANCH_NAME##*/}"

# Check if commit message already has correct branch name.
COMMIT_MESSAGE_FIRST_WORD=`echo $(cut -d':' -f1 $1) | cut -d' ' -f1`
if [ ${COMMIT_MESSAGE_FIRST_WORD,,} = ${BRANCH_NAME,,} ]; then
    exit 0
fi

BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")
BRANCH_IN_COMMIT=$(grep -c "\[$BRANCH_NAME\]" $1)

if [ -n "$BRANCH_NAME" ] && ! [[ $BRANCH_EXCLUDED -eq 1 ]] && ! [[ $BRANCH_IN_COMMIT -ge 1 ]]; then
  sed -i.bak -e "1s/^/$BRANCH_NAME: /" $1
fi

